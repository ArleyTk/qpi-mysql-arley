import React, { useState, useEffect, useRef, useLayoutEffect } from 'react';
import './App.css';
import './registroCompras.css';
import $ from 'jquery';
import 'datatables.net-bs5';

function App() {
  let IDCOMPRADETALLLE = 0;
  const tableRef = useRef(null);
  const [insumos, setInsumos] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [compra, setCompra] = useState({
    id_compra: '',
    nombre_compra: '',
    fecha_compra: '',
    estado_compra: 1, // Valor por defecto
    total_compra: 0,
    id_proveedor: ''
  });
  const [proveedores, setProveedores] = useState([]);

  useEffect(() => {
    fetchInsumos();
    fetchProveedores();
  }, []);

  useEffect(() => {
    if (insumos.length > 0) {
      setIsLoading(false);
    }
  }, [insumos]);

  useLayoutEffect(() => {
    if (tableRef.current && !isLoading) {
      if ($.fn.DataTable.isDataTable(tableRef.current)) {
        $(tableRef.current).DataTable().destroy();
      }
      $(tableRef.current).DataTable({
        pageLength: 5,
        paging: true,
        searching: true,
        ordering: true,
        lengthChange: false,
        info: false,
        dom: '<"data-table-filter"f>tpil',
        language: {
          paginate: {
            first: 'Primero',
            previous: 'Anterior',
            next: 'Siguiente',
            last: 'Último',
          },
          search: '',
        },
        initComplete: function () {
          $('.data-table-filter input').css({
            'width': '150px',
            'height': '30px',
            'font-size': '14px',
            'margin-right': '600px',
          });
          $('.dataTables_length').hide();
        }
      });
    }
  }, [insumos, isLoading]);

  const fetchInsumos = async () => {
    try {
      const response = await fetch('http://localhost:4000/luchosoft/insumos');
      if (response.ok) {
        const data = await response.json();
        // Agregar un campo "seleccionado" a cada insumo
        const insumosConSeleccion = data.map(insumo => ({ ...insumo, seleccionado: false }));
        setInsumos(insumosConSeleccion);
      } else {
        console.error('Error al obtener los insumos');
      }
    } catch (error) {
      console.error('Error al obtener los insumos:', error);
    }
  };

  const fetchProveedores = async () => {
    try {
      const response = await fetch('http://localhost:4000/luchosoft/proveedores');
      if (response.ok) {
        const data = await response.json();
        setProveedores(data);
      } else {
        console.error('Error al obtener los proveedores');
      }
    } catch (error) {
      console.error('Error al obtener los proveedores:', error);
    }
  };

  const handleInputChange = (event) => {
    const { name, value } = event.target;
    setCompra({ ...compra, [name]: value });
  };

  const handleSubmitCompra = async (event) => {
    event.preventDefault();

    try {
      // Envío de la compra
      const responseCompra = await fetch('http://localhost:4000/luchosoft/compras', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(compra)
      });

      if (!responseCompra.ok) {
        console.error('Error al enviar los datos de la compra');
        return;
      }

      const compraData = await responseCompra.json();
      const id_compra_d = compraData.id_compra;
      IDCOMPRADETALLLE = id_compra_d;
      console.log('Compra registrada correctamente:', compraData, "id_compra: ", IDCOMPRADETALLLE);
    } catch (error) {
      console.error('Error al enviar los datos:', error);
    }
  };

  const handleRegisterComprasInsumo = async () => {
    const insumosSeleccionados = insumos.filter(insumo => insumo.seleccionado);

    if (insumosSeleccionados.length === 0) {
      console.error('Debe seleccionar al menos un insumo');
      return;
    }

    try {
      // Registro de insumos asociados a la compra
      const idCompra = compra.id_compra;

      const comprasInsumosPromises = insumosSeleccionados.map(async (insumo) => {
        const comprasInsumosData = {
          cantidad_insumo_compras_insumos: 2132, // Por definir
          precio_insumo_compras_insumos: insumo.precio_unitario, // Utiliza el precio_unitario del insumo seleccionado
          id_compra: IDCOMPRADETALLLE,
          id_insumo: insumo.id_insumo
        };

        try {
          const responseComprasInsumos = await fetch('http://localhost:4000/luchosoft/compras_insumos', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(comprasInsumosData)
          });

          if (!responseComprasInsumos.ok) {
            console.error('Error al enviar los datos de compras_insumo:', responseComprasInsumos.statusText);
          } else {
            console.log('Insumo registrado correctamente:', comprasInsumosData);
          }
        } catch (error) {
          console.error('Error al enviar los datos de compras_insumo:', error);
        }
      });

      await Promise.all(comprasInsumosPromises);
    } catch (error) {
      console.error('Error al enviar los datos:', error);
    }
  };


  const handleInsumoChange = (event, insumoId) => {
    const { checked } = event.target;

    const updatedInsumos = insumos.map(insumo => {
        if (insumo.id_insumo === insumoId) {
            return {
                ...insumo,
                seleccionado: checked,
                cantidadHabilitada: checked, // Habilita o deshabilita el campo de cantidad según el checkbox
                precioHabilitado: checked // Habilita o deshabilita el campo de precio según el checkbox
            };
        }
        return insumo;
    });

    setInsumos(updatedInsumos);
};

  const handlePrecioChange = (event, insumoId) => {
    const { value } = event.target;

    const updatedInsumos = insumos.map(insumo => {
      if (insumo.id_insumo === insumoId) {
        return { ...insumo, precio_unitario: value };
      }
      return insumo;
    });

    setInsumos(updatedInsumos);

    // Calcula el precio total de la compra basado en los insumos seleccionados
    const totalCompra = updatedInsumos.reduce((total, insumo) => {
      if (insumo.seleccionado) {
        return total + (parseFloat(insumo.precio_unitario) || 0);
      }
      return total;
    }, 0);

    // Actualiza el estado del precio de compra
    setCompra({ ...compra, total_compra: totalCompra });
  };





  if (isLoading) {
    return <div>Cargando...</div>;
  }

  return (
    <>
      <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" />
      <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
      <div className="barraPrincipal">
        <div className="contenedor_1">
          <div className="imagen">
          </div>
          <div className="centrar">
            <p>LuchoSoft</p>
          </div>
        </div>
      </div>
      <div className="contenedor">
        <div className="barraLateral">
          <center>
            <h3>Menú</h3>
          </center>
          <div className="sidebar">
            {/* Código del menú */}
          </div>
        </div>
        <div className="contenido">
          <div className="contenido2">
            <br />
            <br />
            <center>
              <div id="titulo">
                <h1>Registrar Compra</h1>
              </div>
            </center>
            <br />
            <br />
            <br />
            <form onSubmit={handleSubmitCompra}>
              <div id="contenedorcito">
                <div className="input-container">
                  <div className='inputs-up'>

                    <br />
                    <div id="kake">
                      <label htmlFor="nombreCompra"><i className="fa-solid fa-font iconosRojos"></i> Nombre Compra</label>
                      <input
                        id="nombreCompra"
                        name="nombre_compra"
                        className="input-field"
                        value={compra.nombre_compra}
                        onChange={handleInputChange}
                        type="text"
                        placeholder="Ingrese el nombre de la compra"
                      />
                    </div>
                    <br />
                    <div id="kaka">
                      <label htmlFor="precioCompra"><i className="fa-sharp fa-solid fa-dollar-sign iconosRojos"></i> Precio Compra</label>
                      <input
                        id="precioCompra"
                        name="total_compra"
                        className="input-field2"
                        value={compra.total_compra || ''} // Asegúrate de manejar undefined o null como cadena vacía
                        onChange={handleInputChange}
                        type="number"
                        placeholder="Ingrese el precio de la compra"
                        readOnly={true}
                        style={{
                          backgroundColor: '#E4E4E4',
                          color: '#999' // 
                        }}
                      />
                    </div>
                  </div>
                  <br />
                  <br />
                  <div className='inputs-down'>

                   
                    <div id="kake">
                      <label htmlFor="fechaCompra"><i className="fa-solid fa-calendar-week iconosRojos"></i> Fecha Compra</label>
                      <input
                        id="fechaCompra"
                        name="fecha_compra"
                        className="input-field"
                        value={compra.fecha_compra}
                        onChange={handleInputChange}
                        type="date"
                        placeholder="Ingrese la fecha de la compra"
                      />
                    </div>
                    <br />

                  <div id="kaka">
                  <label  htmlFor="proveedorCompra"><i className="fa-solid fa-users iconosRojos select"></i> Proveedor</label>
                    <select
                      id="proveedor"
                      name="id_proveedor"
                      className="input-field2"
                      value={compra.id_proveedor}
                      onChange={handleInputChange}
                    >
                      <option value="">Seleccione un proveedor</option>
                      {proveedores.map((proveedor) => (
                        <option key={proveedor.id_proveedor} value={proveedor.id_proveedor}>
                          {proveedor.nombre_proveedor}
                        </option>
                      ))}
                    </select>
                  </div>
                  </div>


                </div>
              </div>
              <center>


                {/* El buscador de la tabla se ubica aquí */}
                <table className="display" style={{ width: "80%", borderCollapse: "collapse", marginLeft: "125px"}} ref={tableRef}>
                  <thead style={{ backgroundColor: "red", color: "white" }}>
                    <tr>
                      <th style={{ border: "1px solid black" }}>Id insumo</th>
                      <th style={{ border: "1px solid black" }}>Nombre Insumo</th>
                      <th style={{ border: "1px solid black" }}>Cantidad</th>
                      <th style={{ border: "1px solid black" }}>Precio</th>
                      {/* <th style={{ border: "1px solid black" }}>Cantidad</th> */}
                      <th style={{ border: "1px solid black" }}>Seleccionar</th>
                    </tr>
                  </thead>
                  <tbody>
                  {insumos.map(insumo => (
    <tr key={insumo.id_insumo} style={{ backgroundColor: "white", color: "black" }}>
        <td style={{ border: "1px solid black" }}>{insumo.id_insumo}</td>
        <td style={{ border: "1px solid black" }}>{insumo.nombre_insumo}</td>
        <td style={{ border: "1px solid black" }}>
            <input
                type="number"
                value={insumo.cantidad}
                onChange={(event) => handleCantidadChange(event, insumo.id_insumo)}
                disabled={!insumo.cantidadHabilitada} // Deshabilita el campo si no está habilitado
            />
        </td>
        <td style={{ border: "1px solid black" }}>
            <input
                type="number"
                value={insumo.precio_unitario}
                onChange={(event) => handlePrecioChange(event, insumo.id_insumo)}
                disabled={!insumo.precioHabilitado} // Deshabilita el campo si no está habilitado
            />
        </td>
        <td style={{ border: "1px solid black" }}>
            <input
                type="checkbox"
                onChange={(event) => handleInsumoChange(event, insumo.id_insumo)}
            />
        </td>
    </tr>
))}
                  </tbody>
                </table>
                <div className="cajaBotones">
                  <button type="submit" id="can" className="vinotinto">Guardar Compra</button>
                  <div className="espacioEntreBotones"></div>
                  <button className="rojo" type="button" onClick={() => window.location.href = './TablaCompras.jsx'}>Cancelar</button>
                  <div className="espacioEntreBotones"></div>
                  <button className="azul" type="button" onClick={handleRegisterComprasInsumo}>Registrar Compras Insumo</button>
                </div>
              </center>
              <br />
            </form>
            <br />
          </div>
          <br />
        </div>
      </div>
      <script src="./assets/menu.js"></script>
    </>
  );
}

export default App;
